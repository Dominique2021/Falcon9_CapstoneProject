In this capstone, we will predict if the Falcon 9 first stage will land successfully. SpaceX advertises Falcon 9 rocket launches on its website, with a cost of 62 million dollars; other providers cost upward of 165 million dollars each, much of the savings is because SpaceX can reuse the first stage. Therefore if we can determine if the first stage will land, we can determine the cost of a launch. This information can be used if an alternate company wants to bid against SpaceX for a rocket launch. In this module, you will be provided with an overview of the problem and the tools you need to complete the course.

Week 3
	- Exploring and Preparing Data
	  
		- Task 7 - Create dummy variables to categorical columns
			- Use the function get_dummies and features data frame to apply OneHotEncoder to the column Orbits, LaunchSite, LandingPad, and Serial. Assign the value to the variable features_one_hot, display the results using the method head. Your result data frame must include all features including the encoded ones.
```
# HINT: Use get_dummies() function on the categorical columns
features_one_hot = pd.get_dummies(features['Orbit'])
features_one_hot.head()
```
		- Task 8 - Create dummy variables to categorical columns
			- Now that our features_one_hot dataframe only contains numbers cast the entire dataframe to variable type float64
```
# HINT: use astype function
features_one_hot.astype('float64').dtypes
```

Task 1
```
html.Br(), 
                                dcc.Dropdown(id='site-dropdown', 
                                options=[ 
                                {'label': 'All Sites', 'value': 'ALL'}, 
                                {'label': 'CCAFS LC-40', 'value': 'site1'}, 
                                {'label': 'CCAFS SLC-40', 'value': 'site2'}, 
                                {'label': 'KSC LC-39A', 'value': 'site3'}, 
                                {'label': 'VAFB SLC-40', 'value': 'site4'},], 
                                value='ALL', placeholder="Select a Launch Site here", searchable=True 
                                ),
```
    
Task 2
```
@app.callback(Output(component_id='success-pie-chart', component_property='figure'), 
            Input(component_id='site-dropdown', component_property='value')) 
def get_pie_chart(entered_site): 
    filtered_df= spacex_df[spacex_df['Launch Site'] == site_dropdown]
    if site_dropdown == 'ALL': 
        piechart=px.pie(filtered_df, values='class',  
        names='Launch Site', title='title') 
    return piechart
```

Task 3
```
# TASK 3: Add a slider to select payload range 
            dcc.RangeSlider(id='payload-slider', 
                min=0, max=10000, step=1000, 
                marks={0: '0', 
                       100: '100'}, 
                value=[min_payload, max_payload]),
```

```
# Import required libraries
import pandas as pd
import dash
import dash_html_components as html
import dash_core_components as dcc
from dash.dependencies import Input, Output
import plotly.express as px

# Read the airline data into pandas dataframe
spacex_df = pd.read_csv("spacex_launch_dash.csv")
max_payload = spacex_df['Payload Mass (kg)'].max()
min_payload = spacex_df['Payload Mass (kg)'].min()

# Create a dash application
app = dash.Dash(__name__)

# Create an app layout
app.layout = html.Div(children=[html.H1('SpaceX Launch Records Dashboard',
                                        style={'textAlign': 'center', 'color': '#503D36',
                                               'font-size': 40}),
                                # TASK 1: Add a dropdown list to enable Launch Site selection
                                # The default select value is for ALL sites
                                html.Div(dcc.Dropdown(id='site-dropdown',
                                 options=[
                                     {'label':'All Sites','value':'ALL'},
                                     {'label':'CCAFS LC-40','value':'CCAFS LC-40'},
                                     {'label':'CCAFS SLC-40','value':'CCAFS SLC-40'},
                                     {'label':'KSC LC-39A','value':'KSC LC-39A'},
                                     {'label':'VAFB SLC-4E','value':'VAFB SLC-4E'}
                                 ], value='ALL',
                                 placeholder='Select a launch Site here',
                                 searchable=True)),
                                html.Br(),

                                # TASK 2: Add a pie chart to show the total successful launches count for all sites
                                # If a specific launch site was selected, show the Success vs. Failed counts for the site
                                html.Div(dcc.Graph(id='success-pie-chart')),
                                html.Br(),

                                html.P("Payload range (Kg):"),
                                # TASK 3: Add a slider to select payload range
                                dcc.RangeSlider(id='payload-slider',min=0,max=10000,step=1000,value=[min_payload,max_payload]),

                                # TASK 4: Add a scatter chart to show the correlation between payload and launch success
                                html.Div(dcc.Graph(id='success-payload-scatter-chart')),
                                ])

# TASK 2:
# Add a callback function for `site-dropdown` as input, `success-pie-chart` as output
@app.callback(Output(component_id='success-pie-chart',component_property='figure'),
Input(component_id='site-dropdown',component_property='value'))


def get_pie_chart(entered_site):
    filtered_df=spacex_df
    if entered_site=='ALL':
        fig=px.pie(spacex_df,values='class',
        names='Launch Site',
        title='Success Count for all launch sites')
        return fig
    else:
        df_site_filtered=spacex_df[spacex_df['Launch Site']==site]
        filtered_df=spacex_df[spacex_df['Launch Site']==entered_site]
        df1=filtered_df.groupby(['Launch Site','class']).size().reset_index(name='class count')
        fig = px.pie(df1, values='class count', names='class', title=f"Total Success Launches for site {site}")
        return fig

# TASK 4:
# Add a callback function for `site-dropdown` and `payload-slider` as inputs, `success-payload-scatter-chart` as output


@app.callback(Output(component_id='success-payload-scatter-chart',component_property='figure'),
                [Input(component_id='site-dropdown',component_property='value'),
                Input(component_id='payload-slider',component_property='value')])
def scatter(site,payload):
    low, high = (payload[0],payload[1])
    mask=spacex_df[spacex_df['Payload Mass (kg)'].between(low,high)]
    if site=='ALL':
        fig=px.scatter(mask,x='Payload Mass (kg)',y='class',color='Booster Version Category',title='Success count on Payload mass for all sites')
        return fig
    else:
        mask_filtered=mask[mask['Launch Site']==site]
        fig=px.scatter(mask_filtered,x='Payload Mass (kg)',y='class',color='Booster Version Category',title='Success count on Payload Mass for' + site)
        return fig

# Run the app
if __name__ == '__main__':
    app.run_server()
```
